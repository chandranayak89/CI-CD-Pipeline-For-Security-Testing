name: Supply Chain Security

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      verification_level:
        description: 'Level of verification to perform'
        required: true
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - strict

env:
  COSIGN_VERSION: 2.2.0
  SYFT_VERSION: 0.80.0
  GRYPE_VERSION: 0.66.0
  SIGSTORE_REKOR_URL: https://rekor.sigstore.dev
  SIGSTORE_FULCIO_URL: https://fulcio.sigstore.dev

jobs:
  dependency-verification:
    name: Verify Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Adjust to your project's requirements file
          pip install pip-audit cyclonedx-bom pip-licenses
      
      - name: Generate temporary credentials
        run: |
          python scripts/secretes_manager.py temp-creds --output .ci-temp-credentials
          source .ci-temp-credentials
        
      - name: Run dependency vulnerability scan
        run: |
          mkdir -p ./reports
          python scripts/check_dependency_vulnerability.py --output-file ./reports/dependency-vulnerabilities.json
          pip-audit --format json --output ./reports/pip-audit-results.json
          
      - name: License compliance check
        run: |
          pip-licenses --format=json --output-file=./reports/license-inventory.json
          python scripts/verify_supply_chain.py --policy security-policies/supply-chain-policy.yml --license-file ./reports/license-inventory.json --output ./reports/license-compliance.json
          
      - name: Generate SBOM
        run: |
          cyclonedx-py -i -o ./reports/sbom.json
          
      - name: Verify integrity of dependencies
        run: |
          python scripts/secretes_manager.py verify-ci --names CI_TEMP_TOKEN CI_TEMP_API_KEY
          python scripts/check_dependency_vulnerability.py --verification-mode --lockfile-path ./Pipfile.lock --output-file ./reports/dependency-integrity.json
          
      - name: Upload scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: ./reports/
          retention-days: 7

  artifact-signing:
    name: Sign Artifacts
    runs-on: ubuntu-latest
    needs: dependency-verification
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.1.1
        with:
          cosign-release: v${{ env.COSIGN_VERSION }}
      
      - name: Record build environment
        run: |
          mkdir -p ./reports
          echo "{\"build_id\": \"${{ github.run_id }}\", \"commit\": \"${{ github.sha }}\", \"ephemeral_builder\": true, \"reproducible_build\": true, \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > ./reports/build-info.json
      
      - name: Generate build artifacts
        run: |
          # Create release artifacts - adapt to your project's build process
          mkdir -p dist
          python setup.py sdist bdist_wheel
          
      - name: Retrieve signing keys
        run: |
          python scripts/secretes_manager.py get ARTIFACT_SIGNING_KEY --output ./signing-key.pem
          chmod 600 ./signing-key.pem
          
      - name: Sign artifacts with Cosign
        run: |
          # Sign each artifact
          for artifact in dist/*; do
            # Generate checksum
            sha256sum "$artifact" >> ./reports/checksums.txt
            
            # Sign artifact
            cosign sign-blob --key ./signing-key.pem "$artifact" > "$artifact.sig"
            
            # Generate provenance attestation
            cosign attest --key ./signing-key.pem --type=provenance --predicate ./reports/sbom.json "$artifact"
          done
          
      - name: Upload signed artifacts
        uses: actions/upload-artifact@v3
        with:
          name: signed-artifacts
          path: |
            dist/
            *.sig
            ./reports/checksums.txt
            ./reports/build-info.json
          retention-days: 7
          
      - name: Clean up sensitive files
        run: |
          shred -u ./signing-key.pem
          python scripts/secretes_manager.py delete CI_TEMP_TOKEN CI_TEMP_API_KEY

  provenance-verification:
    name: Verify Build Provenance
    runs-on: ubuntu-latest
    needs: artifact-signing
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.1.1
        with:
          cosign-release: v${{ env.COSIGN_VERSION }}
          
      - name: Download signed artifacts
        uses: actions/download-artifact@v3
        with:
          name: signed-artifacts
          path: ./signed-artifacts
          
      - name: Retrieve verification key
        run: |
          python scripts/secretes_manager.py get ARTIFACT_VERIFICATION_KEY --output ./verification-key.pem
          chmod 600 ./verification-key.pem
          
      - name: Verify checksums
        run: |
          mkdir -p ./reports
          cd ./signed-artifacts
          sha256sum -c checksums.txt | tee ../reports/checksum-verification.txt
          
      - name: Verify artifact signatures
        run: |
          # Verify each artifact
          mkdir -p ./reports/signature-verification
          for artifact in ./signed-artifacts/dist/*; do
            if [[ -f "$artifact.sig" ]]; then
              echo "Verifying signature for $artifact"
              cosign verify-blob --key ./verification-key.pem --signature "$artifact.sig" "$artifact" | tee -a ./reports/signature-verification/$(basename "$artifact").txt
            fi
          done
          
      - name: Verify provenance attestations
        run: |
          mkdir -p ./reports/provenance-verification
          for artifact in ./signed-artifacts/dist/*; do
            if [[ ! "$artifact" == *.sig ]]; then
              echo "Verifying provenance for $artifact"
              cosign verify-attestation --key ./verification-key.pem "$artifact" | tee ./reports/provenance-verification/$(basename "$artifact").txt
            fi
          done
          
      - name: Verify build reproducibility
        run: |
          # Check for reproducible build markers
          cat ./signed-artifacts/build-info.json | jq .reproducible_build
          
      - name: Upload verification results
        uses: actions/upload-artifact@v3
        with:
          name: provenance-verification-results
          path: ./reports/
          retention-days: 7
          
      - name: Clean up keys
        run: |
          shred -u ./verification-key.pem

  binary-analysis:
    name: Binary Analysis
    runs-on: ubuntu-latest
    needs: artifact-signing
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download signed artifacts
        uses: actions/download-artifact@v3
        with:
          name: signed-artifacts
          path: ./signed-artifacts
      
      - name: Install binary analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils file readelf
          
      - name: Analyze binary artifacts
        run: |
          mkdir -p ./reports/binary-analysis
          
          for artifact in ./signed-artifacts/dist/*.whl; do
            # Extract wheel contents for analysis
            mkdir -p temp_extract
            unzip -q "$artifact" -d temp_extract
            
            # Perform binary analysis on any compiled extensions
            find temp_extract -name "*.so" -o -name "*.dylib" -o -name "*.dll" | while read binary; do
              echo "Analyzing binary: $binary"
              file "$binary" > "./reports/binary-analysis/$(basename "$binary")_file.txt"
              readelf -a "$binary" > "./reports/binary-analysis/$(basename "$binary")_symbols.txt" || true
              
              # Check for hardcoded secrets or sensitive strings
              strings "$binary" | grep -E '(password|secret|token|key|credential)' > "./reports/binary-analysis/$(basename "$binary")_sensitive.txt" || true
            done
            
            # Clean up
            rm -rf temp_extract
          done
          
      - name: Upload binary analysis results
        uses: actions/upload-artifact@v3
        with:
          name: binary-analysis-results
          path: ./reports/binary-analysis/
          retention-days: 7

  container-security:
    name: Container Supply Chain Security
    runs-on: ubuntu-latest
    needs: dependency-verification
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v${{ env.SYFT_VERSION }}
          
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin v${{ env.GRYPE_VERSION }}
      
      - name: Build container image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: app:${{ github.sha }}
          load: true
          
      - name: Generate container SBOM
        run: |
          mkdir -p ./reports
          syft app:${{ github.sha }} -o json > ./reports/container-sbom.json
          syft app:${{ github.sha }} -o cyclonedx-json > ./reports/container-sbom-cyclonedx.json
          
      - name: Scan container for vulnerabilities
        run: |
          grype app:${{ github.sha }} -o json > ./reports/container-vulnerabilities.json
          
      - name: Analyze container layers
        run: |
          docker image inspect app:${{ github.sha }} --format '{{json .RootFS.Layers}}' > ./reports/container-layers.json
          
      - name: Check for sensitive data in container
        run: |
          docker save app:${{ github.sha }} -o ./container-image.tar
          mkdir -p ./container-extract
          tar -xf ./container-image.tar -C ./container-extract
          python scripts/verify_supply_chain.py --policy security-policies/supply-chain-policy.yml --container-filesystem ./container-extract --mode sensitive-data-scan --output ./reports/container-sensitive-data.json
          rm -rf ./container-extract ./container-image.tar
          
      - name: Verify base image integrity
        run: |
          python scripts/check_compliance.py --mode container --image-name app:${{ github.sha }} --output ./reports/container-compliance.json
          
      - name: Sign container image
        run: |
          python scripts/secretes_manager.py get CONTAINER_SIGNING_KEY --output ./container-key.pem
          chmod 600 ./container-key.pem
          cosign sign --key ./container-key.pem app:${{ github.sha }}
          cosign attest --key ./container-key.pem --type=sbom --predicate ./reports/container-sbom-cyclonedx.json app:${{ github.sha }}
          
      - name: Upload container security results
        uses: actions/upload-artifact@v3
        with:
          name: container-security-results
          path: ./reports/
          retention-days: 7
          
      - name: Clean up keys
        run: |
          shred -u ./container-key.pem

  security-gate:
    name: Supply Chain Security Gate
    runs-on: ubuntu-latest
    needs: [dependency-verification, artifact-signing, provenance-verification, binary-analysis, container-security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./all-artifacts
          
      - name: Evaluate security gates
        run: |
          mkdir -p ./reports
          python scripts/evaluate_security_gates.py \
            --dependency-scan ./all-artifacts/dependency-scan-results/ \
            --container-scan ./all-artifacts/container-security-results/ \
            --binary-analysis ./all-artifacts/binary-analysis-results/ \
            --provenance-verification ./all-artifacts/provenance-verification-results/ \
            --policy-config ./security-policies/supply-chain-policy.yml \
            --output ./reports/security-gate-result.json
            
      - name: Generate compliance report
        if: always()
        run: |
          python scripts/verify_supply_chain.py \
            --policy security-policies/supply-chain-policy.yml \
            --mode compliance-report \
            --input ./reports/security-gate-result.json \
            --output ./reports/compliance-report.json
            
      - name: Report to SIEM
        if: always()
        run: |
          python scripts/siem_integration.py \
            --event-type "supply-chain-security" \
            --data-file ./reports/security-gate-result.json \
            --include-sbom ./all-artifacts/dependency-scan-results/sbom.json \
            --include-compliance ./reports/compliance-report.json
            
      - name: Upload final security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: final-security-results
          path: ./reports/
          retention-days: 30
            
      - name: Check gate status
        run: |
          if grep -q "\"passed\": false" ./reports/security-gate-result.json; then
            echo "❌ Security gate failed due to supply chain security issues"
            echo "See the detailed report in the workflow artifacts"
            exit 1
          else
            echo "✅ Supply chain security gate passed"
          fi