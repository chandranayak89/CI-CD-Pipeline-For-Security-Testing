name: Security Testing Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install security scanning tools
        pip install bandit safety semgrep
        
    - name: Run Bandit (SAST)
      run: |
        bandit -r src/ -f json -o bandit-results.json
      continue-on-error: true
      
    - name: Run Safety (Dependency scanning)
      run: |
        safety check -r requirements.txt --json > safety-results.json
      continue-on-error: true
      
    - name: Run Semgrep (SAST with custom rules)
      run: |
        semgrep --config=p/python --config=p/security-audit src/ --json > semgrep-results.json
      continue-on-error: true
      
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep-results.json
        
    - name: Archive security results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          safety-results.json
          semgrep-results.json
          
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint pytest pytest-cov
        
    - name: Lint with pylint
      run: |
        pylint src/ --output-format=json > pylint-results.json
      continue-on-error: true
      
    - name: Run tests with coverage
      run: |
        pytest --cov=src tests/ --cov-report=xml --cov-report=html
      continue-on-error: true
      
    - name: Archive test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          pylint-results.json
          coverage.xml
          htmlcov/
          
  build-and-publish:
    name: Build and Publish
    needs: [security-scan, lint-and-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    # Uncomment when ready to publish to PyPI
    # - name: Publish package to PyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     user: __token__
    #     password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  security-dashboard:
    name: Update Security Dashboard
    needs: [security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Download scan results
      uses: actions/download-artifact@v3
      with:
        name: security-scan-results
        path: security-results
        
    - name: Process security results
      run: |
        # Process security scan results to create summary dashboard
        # This could be a custom script that aggregates the results
        python scripts/process_security_results.py --input security-results --output security-dashboard.html
      continue-on-error: true
      
    - name: Deploy Security Dashboard
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: security-dashboard
        branch: gh-pages
        target-folder: security-dashboard 